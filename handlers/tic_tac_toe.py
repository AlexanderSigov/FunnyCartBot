# handlers/tic_tac_toe.py
from aiogram import Router, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
import random

router = Router()

games = {}  # {chat_id: {"board": [[0, 0, 0], [0, 0, 0], [0, 0, 0]], "difficulty": "easy/hard/impossible"}}

def render_board(board):
    """–°–æ–∑–¥–∞–µ—Ç –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    buttons = []
    symbols = {0: "‚¨ú", 1: "‚ùå", 2: "‚≠ï"}

    for i in range(3):
        row_buttons = [
            InlineKeyboardButton(
                text=symbols[board[i][j]], callback_data=f"move_{i}_{j}"
            ) for j in range(3)
        ]
        buttons.append(row_buttons)

    return InlineKeyboardMarkup(inline_keyboard=buttons)

@router.message(lambda message: message.text == "‚ùå –ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏")
async def select_difficulty(message: types.Message):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üòé –õ–µ–≥–∫–∏–π", callback_data="difficulty_easy")],
        [InlineKeyboardButton(text="ü§ñ –°–ª–æ–∂–Ω—ã–π", callback_data="difficulty_hard")],
        [InlineKeyboardButton(text="üíÄ –ù–µ–≤–æ–∑–º–æ–∂–Ω—ã–π", callback_data="difficulty_impossible")]
    ])
    await message.answer("–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:", reply_markup=keyboard)

@router.callback_query(lambda c: c.data.startswith("difficulty_"))
async def start_game(callback_query: types.CallbackQuery):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –∏–≥—Ä—É —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç—å—é"""
    difficulty = callback_query.data.split("_")[1]  # "easy", "hard" –∏–ª–∏ "impossible"
    board = [[0] * 3 for _ in range(3)]
    games[callback_query.message.chat.id] = {"board": board, "difficulty": difficulty}

    difficulty_text = {"easy": "–õ–µ–≥–∫–∏–π", "hard": "–°–ª–æ–∂–Ω—ã–π", "impossible": "–ù–µ–≤–æ–∑–º–æ–∂–Ω—ã–π"}
    await callback_query.message.edit_text(
        f"–ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É! –°–ª–æ–∂–Ω–æ—Å—Ç—å: {difficulty_text[difficulty]}\n–¢—ã —Ö–æ–¥–∏—à—å –ø–µ—Ä–≤—ã–º. –í—ã–±–µ—Ä–∏ –∫–ª–µ—Ç–∫—É:",
        reply_markup=render_board(board)
    )

@router.callback_query(lambda c: c.data.startswith("move_"))
async def player_move(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ö–æ–¥ –∏–≥—Ä–æ–∫–∞"""
    user_id = callback_query.message.chat.id
    if user_id not in games:
        await callback_query.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –Ω–∞—á–Ω–∏ –Ω–æ–≤—É—é —á–µ—Ä–µ–∑ –º–µ–Ω—é!")
        return

    game = games[user_id]
    board = game["board"]
    _, row, col = callback_query.data.split("_")
    row, col = int(row), int(col)

    if board[row][col] != 0:
        await callback_query.answer("–≠—Ç–∞ –∫–ª–µ—Ç–∫–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞!")
        return

    board[row][col] = 1  # –•–æ–¥ –∏–≥—Ä–æ–∫–∞ (–∫—Ä–µ—Å—Ç–∏–∫)

    if check_winner(board, 1):
        await callback_query.message.edit_text("üéâ –¢—ã –ø–æ–±–µ–¥–∏–ª!", reply_markup=None)
        del games[user_id]
        return

    if is_draw(board):
        await callback_query.message.edit_text("ü§ù –ù–∏—á—å—è!", reply_markup=None)
        del games[user_id]
        return

    # –•–æ–¥ –±–æ—Ç–∞ (–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏)
    if game["difficulty"] == "easy":
        random_bot_move(board)
    elif game["difficulty"] == "hard":
        smart_bot_move(board)
    else:  # impossible
        minimax_bot_move(board)

    if check_winner(board, 2):
        await callback_query.message.edit_text("üò¢ –ë–æ—Ç –ø–æ–±–µ–¥–∏–ª!", reply_markup=None)
        del games[user_id]
        return

    await callback_query.message.edit_text("–¢–≤–æ–π —Ö–æ–¥:", reply_markup=render_board(board))

def random_bot_move(board):
    """–ü—Ä–æ—Å—Ç–æ–π –±–æ—Ç —Å —Ä–∞–Ω–¥–æ–º–Ω—ã–º–∏ —Ö–æ–¥–∞–º–∏"""
    empty_cells = [(i, j) for i in range(3) for j in range(3) if board[i][j] == 0]
    if empty_cells:
        row, col = random.choice(empty_cells)
        board[row][col] = 2  # –•–æ–¥ –±–æ—Ç–∞ (–Ω–æ–ª–∏–∫)

def smart_bot_move(board):
    """AI –¥–ª—è –±–æ—Ç–∞: –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–±–µ–¥–∏—Ç—å, –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∏–≥—Ä–æ–∫–∞ –∏–ª–∏ —Ö–æ–¥–∏—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ"""
    empty_cells = [(i, j) for i in range(3) for j in range(3) if board[i][j] == 0]

    # 1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –±–æ—Ç –≤—ã–∏–≥—Ä–∞—Ç—å
    for row, col in empty_cells:
        board[row][col] = 2
        if check_winner(board, 2):
            return
        board[row][col] = 0

    # 2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –∏–≥—Ä–æ–∫ –≤—ã–∏–≥—Ä–∞—Ç—å, –∏ –±–ª–æ–∫–∏—Ä—É–µ–º –µ–≥–æ
    for row, col in empty_cells:
        board[row][col] = 1
        if check_winner(board, 1):
            board[row][col] = 2
            return
        board[row][col] = 0

    # 3Ô∏è‚É£ –•–æ–¥–∏–º –≤ —Ü–µ–Ω—Ç—Ä, –µ—Å–ª–∏ –æ–Ω —Å–≤–æ–±–æ–¥–µ–Ω
    if board[1][1] == 0:
        board[1][1] = 2
        return

    # 4Ô∏è‚É£ –•–æ–¥–∏–º –≤ –æ–¥–∏–Ω –∏–∑ —É–≥–ª–æ–≤ (–µ—Å–ª–∏ —Å–≤–æ–±–æ–¥–µ–Ω)
    for row, col in [(0, 0), (0, 2), (2, 0), (2, 2)]:
        if board[row][col] == 0:
            board[row][col] = 2
            return

    # 5Ô∏è‚É£ –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –¥–µ–ª–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ö–æ–¥
    row, col = random.choice(empty_cells)
    board[row][col] = 2

def minimax_bot_move(board):
    """–ù–µ–≤–æ–∑–º–æ–∂–Ω—ã–π –±–æ—Ç —Å –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º –ú–∏–Ω–ú–∞–∫—Å"""
    best_score = float('-inf')
    best_move = None
    for i in range(3):
        for j in range(3):
            if board[i][j] == 0:
                board[i][j] = 2  # –ü—Ä–æ–±—É–µ–º —Ö–æ–¥ –±–æ—Ç–∞
                score = minimax(board, 0, False)
                board[i][j] = 0  # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ö–æ–¥
                if score > best_score:
                    best_score = score
                    best_move = (i, j)
    if best_move:
        board[best_move[0]][best_move[1]] = 2

def minimax(board, depth, is_maximizing):
    """–ê–ª–≥–æ—Ä–∏—Ç–º –ú–∏–Ω–ú–∞–∫—Å –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Ö–æ–¥–∞"""
    if check_winner(board, 2):  # –ë–æ—Ç –ø–æ–±–µ–¥–∏–ª
        return 10 - depth
    if check_winner(board, 1):  # –ò–≥—Ä–æ–∫ –ø–æ–±–µ–¥–∏–ª
        return -10 + depth
    if is_draw(board):  # –ù–∏—á—å—è
        return 0

    if is_maximizing:  # –•–æ–¥ –±–æ—Ç–∞ (–º–∞–∫—Å–∏–º–∏–∑–∏—Ä—É–µ–º)
        best_score = float('-inf')
        for i in range(3):
            for j in range(3):
                if board[i][j] == 0:
                    board[i][j] = 2
                    score = minimax(board, depth + 1, False)
                    board[i][j] = 0
                    best_score = max(score, best_score)
        return best_score
    else:  # –•–æ–¥ –∏–≥—Ä–æ–∫–∞ (–º–∏–Ω–∏–º–∏–∑–∏—Ä—É–µ–º)
        best_score = float('inf')
        for i in range(3):
            for j in range(3):
                if board[i][j] == 0:
                    board[i][j] = 1
                    score = minimax(board, depth + 1, True)
                    board[i][j] = 0
                    best_score = min(score, best_score)
        return best_score

def check_winner(board, player):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è"""
    for row in board:
        if all(cell == player for cell in row):
            return True
    for col in range(3):
        if all(board[row][col] == player for row in range(3)):
            return True
    if all(board[i][i] == player for i in range(3)) or all(board[i][2 - i] == player for i in range(3)):
        return True
    return False

def is_draw(board):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∏—á—å—é"""
    return all(cell != 0 for row in board for cell in row)