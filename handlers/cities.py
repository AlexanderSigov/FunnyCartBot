import json
import random
from aiogram import Router
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from keyboards import main_keyboard, finish_keyboard, give_up_keyboard, start_cities_keyboard

router = Router()

# üìå –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON
with open("data/cities.json", "r", encoding="utf-8") as file:
    data = json.load(file)
    WORLD_CITIES = {}
    for item in data["city"]:
        city_name = item["name"].strip()
        first_letter = city_name[0].upper()
        if first_letter not in WORLD_CITIES:
            WORLD_CITIES[first_letter] = []
        WORLD_CITIES[first_letter].append(city_name)

with open("data/russia-cities.json", "r", encoding="utf-8") as file:
    russia_data = json.load(file)
    RUSSIA_CITIES = {}
    for item in russia_data:
        city_name = item["name"].strip()
        first_letter = city_name[0].upper()
        if first_letter not in RUSSIA_CITIES:
            RUSSIA_CITIES[first_letter] = []
        RUSSIA_CITIES[first_letter].append(city_name)

# üìå –ê–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä—ã {user_id: {last_letter, used_cities, cities_source, bot_limit, bot_moves}}
active_games = {}

@router.message(lambda message: message.text == "üèô –ì–æ—Ä–æ–¥–∞")
async def ask_cities_source(message: Message):
    """–°–ø—Ä–∞—à–∏–≤–∞–µ–º, –∫–∞–∫–∏–µ –≥–æ—Ä–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å (–†–æ—Å—Å–∏—è –∏–ª–∏ –º–∏—Ä)"""
    await message.answer("–í—ã–±–µ—Ä–∏, –∫–∞–∫–∏–µ –≥–æ—Ä–æ–¥–∞ –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:", reply_markup=start_cities_keyboard)

@router.message(lambda message: message.text in ["üåç –ì–æ—Ä–æ–¥–∞ –º–∏—Ä–∞", "üá∑üá∫ –ì–æ—Ä–æ–¥–∞ –†–æ—Å—Å–∏–∏"])
async def ask_bot_limit(message: Message):
    """–°–ø—Ä–∞—à–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –æ—Ç–≤–µ—Ç–æ–≤ –±–æ—Ç–∞"""
    user_id = message.from_user.id
    cities_source = WORLD_CITIES if message.text == "üåç –ì–æ—Ä–æ–¥–∞ –º–∏—Ä–∞" else RUSSIA_CITIES

    active_games[user_id] = {"last_letter": None, "used_cities": set(), "cities_source": cities_source, "bot_moves": 0}
    await message.answer("–°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –±–æ—Ç –º–æ–∂–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å? (–ù–∞–ø–∏—à–∏ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 10)")

@router.message(lambda message: message.from_user.id in active_games and active_games[message.from_user.id].get("bot_limit") is None)
async def set_bot_limit(message: Message):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–∏–º–∏—Ç —Ö–æ–¥–æ–≤ –±–æ—Ç–∞"""
    user_id = message.from_user.id
    try:
        bot_limit = int(message.text)
        if bot_limit < 3 or bot_limit > 50:
            raise ValueError
        active_games[user_id]["bot_limit"] = bot_limit
        await message.answer("üèôÔ∏è –ò–≥—Ä–∞–µ–º –≤ '–ì–æ—Ä–æ–¥–∞'! –ù–∞–ø–∏—à–∏ –ø–µ—Ä–≤—ã–π –≥–æ—Ä–æ–¥.", reply_markup=give_up_keyboard)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ –æ—Ç 3 –¥–æ 50.")

@router.message(lambda message: message.text == "üòû –°–¥–∞—é—Å—å!")
async def give_up(message: Message):
    """–ò–≥—Ä–æ–∫ —Å–¥–∞—ë—Ç—Å—è"""
    user_id = message.from_user.id
    if user_id in active_games:
        del active_games[user_id]
        await message.answer("üòî –¢—ã —Å–¥–∞–ª—Å—è! –ë–æ—Ç –ø–æ–±–µ–¥–∏–ª. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!", reply_markup=finish_keyboard)

@router.message(lambda message: message.text == "üîÑ –ù–æ–≤–∞—è –∏–≥—Ä–∞")
async def new_game(message: Message):
    """–ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É"""
    user_id = message.from_user.id
    if user_id in active_games:
        del active_games[user_id]
    await message.answer("üåç –í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º –∏–≥—Ä—ã:", reply_markup=start_cities_keyboard)

@router.message(lambda message: message.text == "üè† –ú–µ–Ω—é")
async def back_to_menu(message: Message):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"""
    user_id = message.from_user.id
    if user_id in active_games:
        del active_games[user_id]
    await message.answer("üè† –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é...", reply_markup=main_keyboard)

@router.message(lambda message: message.from_user.id in active_games)
async def process_city(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –∏–≥—Ä–æ–∫–∞"""
    user_id = message.from_user.id
    game = active_games[user_id]
    city_input = message.text.strip()  # –û—Å—Ç–∞–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –≤–≤–æ–¥ –∏–≥—Ä–æ–∫–∞ –∫–∞–∫ –µ—Å—Ç—å

    # üîç –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑ —É—á—ë—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞
    city_lower = city_input.lower()
    first_letter = city_lower[0].upper()

    # üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ –≥–æ—Ä–æ–¥ —Å –Ω—É–∂–Ω–æ–π –±—É–∫–≤—ã (–µ—Å–ª–∏ –æ–Ω–∞ –∑–∞–¥–∞–Ω–∞)
    last_letter = game["last_letter"]
    if last_letter and first_letter != last_letter:
        await message.answer(f"‚õî –ì–æ—Ä–æ–¥ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è –Ω–∞ –±—É–∫–≤—É **{last_letter}**. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π!")
        return

    # üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –≥–æ—Ä–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω (–±–µ–∑ —É—á—ë—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞)
    if city_lower in (c.lower() for c in game["used_cities"]):
        await message.answer("‚õî –≠—Ç–æ—Ç –≥–æ—Ä–æ–¥ —É–∂–µ –±—ã–ª! –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π.")
        return

    # üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≥–æ—Ä–æ–¥ –≤ –±–∞–∑–µ (–±–µ–∑ —É—á—ë—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞)
    cities_source = game["cities_source"]
    if first_letter not in cities_source:
        await message.answer(f"ü§î –ù–µ –∑–Ω–∞—é —Ç–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ ({city_input}). –ü—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è.")
        return

    # –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –±–µ–∑ —É—á—ë—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞
    matching_city = None
    for city in cities_source[first_letter]:
        if city.lower() == city_lower:
            matching_city = city  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–≥–∏—Å—Ç—Ä –∏–∑ –±–∞–∑—ã
            break

    if not matching_city:
        await message.answer(f"ü§î –ù–µ –∑–Ω–∞—é —Ç–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ ({city_input}). –ü—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è.")
        return

    # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–æ–¥ –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ (–≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ –∏–∑ –±–∞–∑—ã)
    game["used_cities"].add(matching_city)

    # üîç –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –±—É–∫–≤—É (–∏—Å–∫–ª—é—á–∞—è '—ä', '—å', '—ã')
    last_letter = matching_city[-1].upper()
    while last_letter in "–™–¨–´":
        last_letter = matching_city[-2].upper()

    game["last_letter"] = last_letter

    # üìå –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—á–µ—Ä–ø–∞–ª –ª–∏ –±–æ—Ç —Å–≤–æ–π –ª–∏–º–∏—Ç
    if game["bot_moves"] >= game["bot_limit"]:
        await message.answer("ü§ñ –ë–æ–ª—å—à–µ –Ω–µ –∑–Ω–∞—é –≥–æ—Ä–æ–¥–æ–≤! –¢—ã –ø–æ–±–µ–¥–∏–ª! üéâ", reply_markup=finish_keyboard)
        del active_games[user_id]
        return

    # ü§ñ –ë–æ—Ç –∏—â–µ—Ç –≥–æ—Ä–æ–¥ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –±—É–∫–≤—É
    if last_letter in cities_source:
        possible_cities = [c for c in cities_source[last_letter] if c.lower() not in (used.lower() for used in game["used_cities"])]

        # üõë –ï—Å–ª–∏ –≥–æ—Ä–æ–¥–æ–≤ —Ä–µ–∞–ª—å–Ω–æ –Ω–µ—Ç, –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–∑—è—Ç—å –ª—é–±—É—é –±—É–∫–≤—É
        if not possible_cities:
            await message.answer(f"ü§ñ –Ø –Ω–µ –∑–Ω–∞—é –≥–æ—Ä–æ–¥–æ–≤ –Ω–∞ –±—É–∫–≤—É {last_letter}. –ú–æ–∂–µ—à—å –≤–∑—è—Ç—å –ª—é–±—É—é –±—É–∫–≤—É!")
            game["last_letter"] = None
            return

        # üìç –ï—Å–ª–∏ –≥–æ—Ä–æ–¥–∞ –µ—Å—Ç—å, –±–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç
        bot_city = random.choice(possible_cities)
        game["used_cities"].add(bot_city)
        game["last_letter"] = bot_city[-1].upper()
        game["bot_moves"] += 1

        while game["last_letter"] in "–™–¨–´":
            game["last_letter"] = bot_city[-2].upper()

        await message.answer(f"üìç {bot_city}! –¢–µ–ø–µ—Ä—å —Ç–µ–±–µ –Ω–∞ **{game['last_letter']}**")
    else:
        await message.answer(f"ü§ñ –ù–µ –∑–Ω–∞—é –≥–æ—Ä–æ–¥–æ–≤ –Ω–∞ {last_letter}. –ë–µ—Ä–∏ –ª—é–±—É—é –±—É–∫–≤—É!")
        game["last_letter"] = None