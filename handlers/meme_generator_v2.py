# handlers/meme_generator_v2.py
from aiogram import Router, types
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import aiohttp
import random

router = Router()

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
class MemeGeneratorV2(StatesGroup):
    choosing_mood = State()  # –í—ã–±–æ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
    top_text = State()       # –í–≤–æ–¥ –≤–µ—Ä—Ö–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞
    bottom_text = State()    # –í–≤–æ–¥ –Ω–∏–∂–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
MEME_TEMPLATES = {
    "positive": [
        "Success-Kid", "Drake-Hotline-Bling", "Good-Guy-Greg", "Yo-Dawg", "10-Guy",
        "Happy-Cat", "Overly-Attached-Girlfriend", "Socially-Awesome-Penguin", "Aw-Yeah-Rage-Face",
        "Chemistry-Cat", "Lol-Cat"
    ],
    "negative": [
        "Grumpy-Cat", "One-Does-Not-Simply", "Disaster-Girl", "First-World-Problems", "Bad-Luck-Brian",
        "Scumbag-Steve", "Socially-Awkward-Penguin", "Yao-Ming-Face", "Facepalm", "Rageguy-F7U12",
        "Cereal-Guy-Spitting", "Me-Gusta"
    ],
    "neutral": [
        "Distracted-Boyfriend", "Philosoraptor", "Y-U-No", "Troll-Face", "Forever-Alone",
        "Ancient-Aliens", "Spongebob-Mocking", "Skeptical-3rd-World-Child", "Okay-Guy-Rage-Face",
        "Derp"
    ],
    "random": [
        "Success-Kid", "Drake-Hotline-Bling", "Good-Guy-Greg", "Yo-Dawg", "10-Guy",
        "Happy-Cat", "Overly-Attached-Girlfriend", "Socially-Awesome-Penguin", "Aw-Yeah-Rage-Face",
        "Chemistry-Cat", "Lol-Cat",
        "Grumpy-Cat", "One-Does-Not-Simply", "Disaster-Girl", "First-World-Problems", "Bad-Luck-Brian",
        "Scumbag-Steve", "Socially-Awkward-Penguin", "Yao-Ming-Face", "Facepalm", "Rageguy-F7U12",
        "Cereal-Guy-Spitting", "Me-Gusta",
        "Distracted-Boyfriend", "Philosoraptor", "Y-U-No", "Troll-Face", "Forever-Alone",
        "Ancient-Aliens", "Spongebob-Mocking", "Skeptical-3rd-World-Child", "Okay-Guy-Rage-Face",
        "Derp"
    ]
}

def get_mood_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è"""
    buttons = [
        [types.InlineKeyboardButton(text="üòä –ü–æ–∑–∏—Ç–∏–≤–Ω–æ–µ", callback_data="mood_positive")],
        [types.InlineKeyboardButton(text="üòø –ù–µ–≥–∞—Ç–∏–≤–Ω–æ–µ", callback_data="mood_negative")],
        [types.InlineKeyboardButton(text="üòê –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ", callback_data="mood_neutral")],
        [types.InlineKeyboardButton(text="üé≤ –°–ª—É—á–∞–π–Ω–æ", callback_data="mood_random")]
    ]
    return types.InlineKeyboardMarkup(inline_keyboard=buttons)

def get_skip_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"""
    buttons = [
        [types.InlineKeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip")]
    ]
    return types.InlineKeyboardMarkup(inline_keyboard=buttons)

@router.message(lambda message: message.text == "üòÇ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –º–µ–º–æ–≤")
async def start_meme_generator_v2(message: types.Message, state: FSMContext):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –º–µ–º–æ–≤ v2 —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É"""
    await message.reply("–î–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º –º–µ–º! –í—ã–±–µ—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ:", reply_markup=get_mood_keyboard())
    await state.set_state(MemeGeneratorV2.choosing_mood)

@router.callback_query(MemeGeneratorV2.choosing_mood)
async def choose_mood(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è"""
    if callback.data.startswith("mood_"):
        mood = callback.data.split("_")[1]  # positive, negative, neutral, random
        await state.update_data(mood=mood)
        await callback.message.edit_text(
            "–í–≤–µ–¥–∏ –≤–µ—Ä—Ö–Ω–∏–π —Ç–µ–∫—Å—Ç (–∏–ª–∏ –Ω–∞–∂–º–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º):",
            reply_markup=get_skip_keyboard()
        )
        await state.set_state(MemeGeneratorV2.top_text)
        await callback.answer()
    else:
        await callback.answer("–í—ã–±–µ—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö!", show_alert=True)

@router.message(MemeGeneratorV2.top_text)
async def get_top_text(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–µ—Ä—Ö–Ω–∏–π —Ç–µ–∫—Å—Ç"""
    top_text = message.text.strip() if message.text else ""
    await state.update_data(top_text=top_text)
    await message.reply(
        "–í–≤–µ–¥–∏ –Ω–∏–∂–Ω–∏–π —Ç–µ–∫—Å—Ç (–∏–ª–∏ –Ω–∞–∂–º–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º):",
        reply_markup=get_skip_keyboard()
    )
    await state.set_state(MemeGeneratorV2.bottom_text)

@router.callback_query(MemeGeneratorV2.top_text, lambda c: c.data == "skip")
async def skip_top_text(callback: types.CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç –≤–µ—Ä—Ö–Ω–∏–π —Ç–µ–∫—Å—Ç"""
    await state.update_data(top_text="")
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏ –Ω–∏–∂–Ω–∏–π —Ç–µ–∫—Å—Ç (–∏–ª–∏ –Ω–∞–∂–º–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º):",
        reply_markup=get_skip_keyboard()
    )
    await state.set_state(MemeGeneratorV2.bottom_text)
    await callback.answer()

@router.message(MemeGeneratorV2.bottom_text)
async def get_bottom_text_and_generate(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∏–∂–Ω–∏–π —Ç–µ–∫—Å—Ç –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–µ–º"""
    bottom_text = message.text.strip() if message.text else ""
    await generate_meme(message, state, bottom_text)

@router.callback_query(MemeGeneratorV2.bottom_text, lambda c: c.data == "skip")
async def skip_bottom_text_and_generate(callback: types.CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç –Ω–∏–∂–Ω–∏–π —Ç–µ–∫—Å—Ç –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–µ–º"""
    await generate_meme(callback.message, state, "")
    await callback.answer()

async def generate_meme(message: types.Message, state: FSMContext, bottom_text: str):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ"""
    data = await state.get_data()
    mood = data["mood"]
    top_text = data["top_text"]

    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —à–∞–±–ª–æ–Ω –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
    template = random.choice(MEME_TEMPLATES[mood])

    # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è API
    url = f"http://apimeme.com/meme?meme={template}&top={top_text}&bottom={bottom_text}"

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                if response.status == 200:
                    meme_image = await response.read()
                    await message.reply_photo(photo=types.BufferedInputFile(meme_image, filename="meme.jpg"))
                else:
                    await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º–µ–º, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!")
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞: {str(e)}")

    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()